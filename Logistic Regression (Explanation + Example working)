{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Logistic Regression (Explanation + Example working)","provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1nd-DTky7aP-cuIB2WL5BxoCTkVtrBCdr","authorship_tag":"ABX9TyNcGlXzPAxeQQ3YeI9yHm1P"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"p3jEd_by9rOT"},"source":["Defined the load_dataset() from the course instructions"]},{"cell_type":"code","metadata":{"id":"rhfpzOcI9gSq","executionInfo":{"status":"ok","timestamp":1634236664098,"user_tz":180,"elapsed":461,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}}},"source":["import numpy as np\n","import h5py\n","    \n","    \n","def load_dataset():\n","    train_dataset = h5py.File('/content/drive/My Drive/Colab Notebooks/Logistic Regression as a Neural Network/datasets/train_catvnoncat.h5', \"r\")\n","    train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) # your train set features\n","    train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) # your train set labels\n","\n","    test_dataset = h5py.File('/content/drive/My Drive/Colab Notebooks/Logistic Regression as a Neural Network/datasets/test_catvnoncat.h5', \"r\")\n","    test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) # your test set features\n","    test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) # your test set labels\n","\n","    classes = np.array(test_dataset[\"list_classes\"][:]) # the list of classes\n","    \n","    train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))\n","    test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))\n","    \n","    return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tPAZP7hz9xQa"},"source":["Got the packages needed"]},{"cell_type":"code","metadata":{"id":"cSDuhQJT8lXH","executionInfo":{"status":"ok","timestamp":1634236585266,"user_tz":180,"elapsed":787,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import h5py\n","import scipy\n","from PIL import Image\n","from scipy import ndimage\n","\n","%matplotlib inline"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"56_x2Yb49zXy"},"source":["Got the data -> One important thing to remeber is to add the data when I restart this colab // go to the left tab and click on the option \"mount drive\""]},{"cell_type":"code","metadata":{"id":"UhqZncVM9ijD","executionInfo":{"status":"ok","timestamp":1634236716080,"user_tz":180,"elapsed":901,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}}},"source":["train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = load_dataset()"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SvUty5h0-mxE"},"source":["Example of a picture"]},{"cell_type":"code","metadata":{"id":"DVfaBBlK91bl","colab":{"base_uri":"https://localhost:8080/","height":289},"executionInfo":{"status":"ok","timestamp":1634236749573,"user_tz":180,"elapsed":399,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}},"outputId":"831dad05-3a07-432b-a944-d3d72e2019fa"},"source":["# Example of a picture\n","index = 28 # choose some index and see it\n","plt.imshow(train_set_x_orig[index])\n","print (\"y = \" + str(train_set_y[:, index]) + \", it's a '\" + classes[np.squeeze(train_set_y[:, index])].decode(\"utf-8\") +  \"' picture.\")"],"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["y = [0], it's a 'non-cat' picture.\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"iTfWC1qN-ofM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634236753365,"user_tz":180,"elapsed":29,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}},"outputId":"94f74ca7-6354-403d-d0ea-b4a20151e9ee"},"source":["m_train = train_set_x_orig.shape[0]\n","m_test = test_set_x_orig.shape[0]\n","num_px = train_set_x_orig.shape[1]\n","print(\"M train: \", m_train, \"\\nM test: \", m_test, \"\\nNumPx: \", num_px)"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["M train:  209 \n","M test:  50 \n","NumPx:  64\n"]}]},{"cell_type":"markdown","metadata":{"id":"KMS3qaXeAhQc"},"source":["We'll expand the pixels of the image in a way that we no longer have that 3d representation of the image, instead we're going to have a big matrix of size $numPx \\cdot numPx \\cdot 3$, which is that collapse of the 3d matriz we have into a vector.\n","It is going to be represented just like in the video course:\n","\n","$\\begin{bmatrix}\n","x_1^{1} & x_1^{2} & \\cdots & x_1^{m}\\\\\n","x_2^{1} & x_2^{2} & \\cdots & x_2^{m}\\\\\n","\\vdots & \\vdots & \\ddots & \\vdots\\\\\n","x_{n_x}^1 & x_{n_x}^2 & \\cdots & x_{n_x}^{m}\n","\\end{bmatrix}$\n","\n","in such a way that we have Nx rows (the x values of each test case) and m colums, where each column represents a testcase"]},{"cell_type":"code","metadata":{"id":"MXtqNit0_lrc","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634236765432,"user_tz":180,"elapsed":480,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}},"outputId":"81263c12-9e44-40d1-ca15-996978bc7c0f"},"source":["train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T\n","test_set_x_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T\n","print(train_set_x_flatten.shape)\n","print(test_set_x_flatten.shape)"],"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["(12288, 209)\n","(12288, 50)\n"]}]},{"cell_type":"markdown","metadata":{"id":"3p_q8nWUDxaM"},"source":["Now we need to normalize the data in order to make it more feasible and appropriate for the gradient descent to work"]},{"cell_type":"code","metadata":{"id":"AcTpkTxlAWwf","executionInfo":{"status":"ok","timestamp":1634236773596,"user_tz":180,"elapsed":375,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}}},"source":["train_set_x = train_set_x_flatten/255\n","test_set_x = test_set_x_flatten/255"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cn3DRzMh1O2N"},"source":["Now we're going to build ourselves the sigmoid function\n","It is important to remeber what the sigmoid function actually is:\n","$\\sigma(x) = \\dfrac{1}{1 + e^{-x}}$\n","from which we can derive its use, that is to map the values to the interval $[0..1]$"]},{"cell_type":"code","metadata":{"id":"8t2xsxG1zabN","executionInfo":{"status":"ok","timestamp":1634236789688,"user_tz":180,"elapsed":332,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}}},"source":["def sigmoid(x):\n","  # Note that x might be a numpy matrix, and we apply the function to each element\n","  s = 1 / (1 + np.exp(-x))\n","  return s"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"Sqy3I5So5vMt","executionInfo":{"status":"ok","timestamp":1634236797482,"user_tz":180,"elapsed":322,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}}},"source":["def init(dim):\n","  w = np.zeros((dim,1))\n","  b = 0\n","  return w, b"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6Mq52TjaiIdK"},"source":["Doing a recap on what we need to calulate for our linear regression in the foward propagation to work:\n","$z^i = w^t x^i + b$ ($w^t$ defines the transposal of w, for us to be able to multiply it by $x^i$ in the way we want) (remember that $w^t$ and $x^i$ are vectors, so the multiplication defined in there is their dot product)and this z value is the value we get applying the weights to each one of those inputs and then adding to it the bias.\n","Next in the computation graph there is the value of a, which is the sigmoid of z: $a^i = \\sigma(z^i)$. Going even further in the computational graph we need to remeber of the loss function, which takes as parameters the prediction of our model for that test set and the set comparing values and then outputs a value which we want to minimize: $L(a^i, y^i) = y \\cdot ln(a) + (1-y) \\cdot ln(1-a)$. Which is used because the value of $y^i$ can only assume two possibilities, which means that if $y^i = 1$ we'll take the first value and we'll want to make $a^i$ as big as possible, on the other case it is similiar but we want to make $a^i$ as small as possible (remember that those are inside a sigmoid, which means that they're mapped in the interval $[0..1]$. It is also good because it is convex and gives us a global minima the gradient descent can search for.\n","There also is another function that is defined on top of the loss function for each that case which is the cost function of that set of weights and biases on the entire dataset, which is defines as: $J = \\frac{-1}{m} \\cdot (\\sum_{j=1}^{m}L(a^i, y^i))$, which is nothing more than the average of the loss functions of every test case."]},{"cell_type":"markdown","metadata":{"id":"exal6UQjk1h2"},"source":["That came out too big so I'll just write out the formulas:\n","\n","$z^i = w^t x^i + b$\n","\n","$a^i = \\sigma(z^i)$\n","\n","$L(a^i, y^i) = y \\cdot ln(a) + (1-y) \\cdot ln(1-a)$\n","\n","$J = \\frac{-1}{m} \\cdot (\\sum_{i=1}^{m}L(a^i, y^i))$"]},{"cell_type":"markdown","metadata":{"id":"wjWrE4TWl3i8"},"source":["Those are the formulas we need to understand how the work is being done on every single testcase on the foward propagation fase, but in the actual code we vectorize it to make it faster due to the efficiency of the numpy library, instead of working them out manually using for loops. The code for those values will look like written below"]},{"cell_type":"markdown","metadata":{"id":"jn2-d6AHnN-L"},"source":["The inputs are a column vector (aka matrix of shape = $(n_x,1)$) W, which are the weights of associated with each input. A matrix of shape = $(n_x, m)$, which is just like described above a bunch of testcases on each column (m columns means that there are m test cases) -> The input data of each test.\n","A real number $b$, which is the bias of that neuron. A row vector (aka matrix of shape = $(1,m)$) which has the expected values of each test case."]},{"cell_type":"markdown","metadata":{"id":"XstFS6vu1-wE"},"source":["We also want to calculate in this propagate function all the derivatives/gradients needed for the gradient descent to work, so let's remind how to find them:\n","First of all we need to understand the chain rule in the computation graph, which means that we want to find the derivative of the loss function with respect to each weight and to the bias. To do so we use the chain rule to know that \n","\n","$\\dfrac{\\partial f(v(a))}{\\partial a} = \\dfrac{\\partial f(v(a))}{\\partial v(a)} \\cdot \\dfrac{\\partial v(a)}{\\partial a}$.\n","\n","And so we can generate in a backwards sense the derivatives of the loss function with respect to each value.\n","\n","What actually happens is: we calculate the derivate of $L$ with respect to $a \\rightarrow (sigmoid(z))$, which turns out to be a weird number that I don't remember, then we calculate the derivative of a with respect to z, which is the derivative of a sigmoig which is: $\\sigma'(x) = \\sigma(x)\\cdot(1-\\sigma(x))$\n","Combining those two we get $\\dfrac{\\partial L(y, a)}{\\partial z} = a - y$.\n","So we have a clean value for dz we can use.\n","Now we want to calculate the value of$\\dfrac{\\partial L(y, a)}{\\partial w^i}$. To do so we simply get by using the chain rule \n","\n","$\\dfrac{\\partial L(y, a)}{\\partial w^i} = \\dfrac{\\partial L(y, a)}{\\partial z} \\cdot \\dfrac{\\partial z}{\\partial w^i} = x^i \\cdot (a - y)$\n","\n","A pretty much the same ideia works to find the derivative of b, but it is only one value this time instead of multiple values.\n"]},{"cell_type":"code","metadata":{"id":"65Eu66fTm5Y6","executionInfo":{"status":"ok","timestamp":1634236932113,"user_tz":180,"elapsed":340,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}}},"source":["def propagate(w, b, X, Y):\n","  m = X.shape[1]\n","  \n","  ### FOWARD PROPAGATION ###\n","  z = np.dot(w.T, X) + b\n","  a = sigmoid(z)\n","\n","  # print(w.shape)\n","  # print(X.shape)\n","\n","  # print(w)\n","  # print(X)\n","  # print(z)\n","  # print(a)\n","\n","  # A is now a row vector (shape = (1,m)), so we need to transpose it to be\n","  # able to do the matrix multiplication correctly\n","  \n","  cost = (-1/m)*(np.dot(Y, np.log(a).T) + np.dot((1-Y), np.log(1-a).T))\n","  \n","  cost = np.squeeze(cost) # Turns the cost into a single variable\n","  \n","  assert(cost.shape == ())\n","\n","  ### BACKWARD PROPAGATION (FIND DERIVATIVES/GRADIENTS) ###\n","\n","  dz = a - Y\n","  dw = (1/m)*np.dot(X, dz.T)\n","  db = (1/m)*np.sum(dz)\n","\n","  # print(dw.shape)\n","\n","  grads = {\"dw\": dw,\n","           \"db\": db}\n","\n","  return grads, cost"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"O2GeROOvyZLG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634236941166,"user_tz":180,"elapsed":425,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}},"outputId":"152789b6-c818-4237-da41-bc3d65113d93"},"source":["w, b, X, Y = np.array([[1.],[2.]]), 2., np.array([[1.,2.,-1.],[3.,4.,-3.2]]), np.array([[1,0,1]])\n","grads, cost = propagate(w, b, X, Y)\n","print (\"dw = \" + str(grads[\"dw\"]))\n","print (\"db = \" + str(grads[\"db\"]))\n","print (\"cost = \" + str(cost))"],"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["dw = [[0.99845601]\n"," [2.39507239]]\n","db = 0.001455578136784208\n","cost = 5.801545319394553\n"]}]},{"cell_type":"markdown","metadata":{"id":"gUYxrqI23Yed"},"source":["Now we're onto the step of implmenting the gradient descent. Which we can run multiple times but what we do on every iteration is simply run a foward and then backpropagation (in the function we coded above) and get the value of the cost function (just to illustrate the improvements of the regression), and most importantly the derivatives in that point of the values of every weight (they're represented in the code as a column vector which contains the derivatives of every weight in the network -> it is in the format of a column vector, just like the original weights vector), we also take the derivative of b. Using those we update the values of the weights and of b in the following manner:\n","$w = w - \\alpha \\cdot dw$, where dw is the derivatives we calculated and alpha is the learning rate. The same is applied to b."]},{"cell_type":"code","metadata":{"id":"DfWIPihchM4G","executionInfo":{"status":"ok","timestamp":1634236960021,"user_tz":180,"elapsed":303,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}}},"source":["def optimize(w, b, X, Y, num_iterations, learning_rate, print_cost = False, period = 100):\n","  \n","  costs = []\n","\n","  for i in range(num_iterations):\n","    grads, cost = propagate(w, b, X, Y)\n","    dw = grads[\"dw\"]\n","    db = grads[\"db\"]\n","\n","    if print_cost and i%period == 0:\n","      print(\"Cost after the %i iteration %f\" %(i, cost))\n","\n","    if i%period == 0:\n","      costs.append(cost)\n","    \n","    w = w - learning_rate * dw\n","    b = b - learning_rate * db\n","    learning_rate /= 1.0005 # I added this line to make the learning rate not constant\n","\n","    params = {\"w\": w,\n","              \"b\": b}\n","    \n","    grads = {\"dw\": dw,\n","             \"db\": db}\n","\n","  return params, grads, costs"],"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"MYDG2kTW8bFw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634236964358,"user_tz":180,"elapsed":349,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}},"outputId":"35ff875e-25df-4137-eaf8-4ddb631d19c3"},"source":["params, grads, costs = optimize(w, b, X, Y, num_iterations= 100, learning_rate = 0.009, print_cost = True)\n","\n","print (\"w = \" + str(params[\"w\"]))\n","print (\"b = \" + str(params[\"b\"]))\n","print (\"dw = \" + str(grads[\"dw\"]))\n","print (\"db = \" + str(grads[\"db\"]))"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Cost after the 0 iteration 5.801545\n","w = [[0.20530569]\n"," [0.15397643]]\n","b = 1.9301292692761238\n","dw = [[0.6913618 ]\n"," [1.45400615]]\n","db = 0.21781412474157616\n"]}]},{"cell_type":"markdown","metadata":{"id":"a8qjI1jL9X22"},"source":["Now we need to get what is our predictions based on the value of a( if a <= 0.5 it is 0, otherwise it is 1)"]},{"cell_type":"code","metadata":{"id":"rFmiqELI8sRy","executionInfo":{"status":"ok","timestamp":1634236968812,"user_tz":180,"elapsed":428,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}}},"source":["def predict(w, b, X):\n","  z = np.dot(w.T, X)\n","  a = sigmoid(z)\n","  Y_prediction = np.round(a, decimals=0)\n","  Y_prediction = Y_prediction.astype(int)\n","  assert(Y_prediction.shape == (1, X.shape[1]))\n","  return Y_prediction"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"id":"C5b14GSa9xSP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634236972973,"user_tz":180,"elapsed":336,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}},"outputId":"a44a56cb-247e-4af9-a3ab-287cd5101e8f"},"source":["w = np.array([[0.1124579],[0.23106775]])\n","b = -0.3\n","X = np.array([[1.,-1.1,-3.2],[1.2,2.,0.1]])\n","print (\"predictions = \" + str(predict(w, b, X)))"],"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["predictions = [[1 1 0]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"MyG7cNkK-nN5"},"source":["Now we'll wrap everything together to build our model"]},{"cell_type":"code","metadata":{"id":"-xKN5AI4-mL1","executionInfo":{"status":"ok","timestamp":1634236978538,"user_tz":180,"elapsed":413,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}}},"source":["def model(X_train, Y_train, X_test, Y_test, num_iterations = 2000, learning_rate = 0.005, print_cost = True, period=100):\n","  w, b = init(X_train.shape[0])\n","  params, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate, print_cost, period)\n","  \n","  w = params[\"w\"]\n","  b = params[\"b\"]\n","  dw = grads[\"dw\"]\n","  db = grads[\"db\"]\n","\n","  # we now get what our model predicts for each test case\n","  Y_prediction_test = predict(w, b, X_test)\n","  Y_prediction_train = predict(w, b, X_train)\n","\n","  # print accuracy\n","  print(\"train accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_train - Y_train)) * 100))\n","  print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(Y_prediction_test - Y_test)) * 100))\n","\n","  d = {\"costs\": costs,\n","       \"Y_prediction_test\": Y_prediction_test, \n","       \"Y_prediction_train\" : Y_prediction_train, \n","       \"w\" : w, \n","       \"b\" : b,\n","       \"learning_rate\" : learning_rate,\n","       \"num_iterations\": num_iterations}\n","  \n","  return d"],"execution_count":18,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FK46I__-aFJM"},"source":["Use this to train the model adjusting the parameters"]},{"cell_type":"code","metadata":{"id":"HEqFw_njAH8S","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634236990001,"user_tz":180,"elapsed":7983,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}},"outputId":"3045b31a-b067-4e76-aa08-d100ed324ac8"},"source":["d = model(train_set_x, train_set_y, test_set_x, test_set_y, num_iterations = 3000, learning_rate = 0.003, print_cost = True, period=500)"],"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["Cost after the 0 iteration 0.693147\n","Cost after the 500 iteration 0.385255\n","Cost after the 1000 iteration 0.312851\n","Cost after the 1500 iteration 0.274524\n","Cost after the 2000 iteration 0.250975\n","Cost after the 2500 iteration 0.235357\n","train accuracy: 96.17224880382776 %\n","test accuracy: 74.0 %\n"]}]},{"cell_type":"markdown","metadata":{"id":"K-6AfZcWaPnz"},"source":["Select an index of the test set to test"]},{"cell_type":"code","metadata":{"id":"aMQkWv42ALoC","colab":{"base_uri":"https://localhost:8080/","height":289},"executionInfo":{"status":"ok","timestamp":1634237038984,"user_tz":180,"elapsed":446,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}},"outputId":"22c59c89-da3f-4507-c036-e9948dcf354d"},"source":["index = 13\n","plt.imshow(test_set_x[:,index].reshape((num_px, num_px, 3)))\n","print (\"y = \" + str(test_set_y[0,index]) + \", you predicted that it is a \\\"\" + classes[d[\"Y_prediction_test\"][0, index]].decode(\"utf-8\") +  \"\\\" picture.\")"],"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["y = 0, you predicted that it is a \"cat\" picture.\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"WTh2xTeCaV3B"},"source":["Plot the costs over the iterations"]},{"cell_type":"code","metadata":{"id":"WmqZ48j1D4CS","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1634237049238,"user_tz":180,"elapsed":468,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}},"outputId":"d31656bf-36ae-4429-dc9a-82412622480c"},"source":["costs = np.squeeze(d['costs'])\n","plt.plot(costs)\n","plt.ylabel('cost')\n","plt.xlabel('iterations (per hundreds)')\n","plt.title(\"Learning rate =\" + str(d[\"learning_rate\"]))\n","plt.show()"],"execution_count":28,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"5RqgtgjoaaWZ"},"source":["Add any image (jpg or jpeg) to the images folder and then change the name to see what is the prediction of the algorithm for it\n"]},{"cell_type":"code","metadata":{"id":"0Ms4VTZGYp--","colab":{"base_uri":"https://localhost:8080/","height":278},"executionInfo":{"status":"error","timestamp":1634237178218,"user_tz":180,"elapsed":319,"user":{"displayName":"luca dantas","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"09812855181185170077"}},"outputId":"460bd19c-010a-4081-82ad-c82a9330c112"},"source":["# I added this because the warnings here we annoying\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","\n","## START CODE HERE ## (PUT YOUR IMAGE NAME) \n","my_image = \"gato.jpg\"   # change this to the name of your image file \n","## END CODE HERE ##\n","\n","# We preprocess the image to fit your algorithm.\n","fname = \"/content/drive/My Drive/Colab Notebooks/Logistic Regression as a Neural Network/images/\" + my_image\n","image = np.array(ndimage.imread(fname, flatten=False))\n","image = image/255.\n","my_image = scipy.misc.imresize(image, size=(num_px,num_px)).reshape((1, num_px*num_px*3)).T\n","my_predicted_image = predict(d[\"w\"], d[\"b\"], my_image)\n","\n","plt.imshow(image)\n","print(\"y = \" + str(np.squeeze(my_predicted_image)) + \", your algorithm predicts a \\\"\" + classes[int(np.squeeze(my_predicted_image)),].decode(\"utf-8\") +  \"\\\" picture.\")"],"execution_count":31,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-31-b420057e1c89>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# We preprocess the image to fit your algorithm.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mfname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/drive/My Drive/Colab Notebooks/Logistic Regression as a Neural Network/images/\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mmy_image\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mndimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflatten\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0;36m255.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mmy_image\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscipy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmisc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimresize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_px\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mnum_px\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_px\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnum_px\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: module 'scipy.ndimage' has no attribute 'imread'"]}]}]}